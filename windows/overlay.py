import subprocess
import tkinter as tk
import sounddevice as sd
import soundfile as sf
import threading
import requests
import os
import uuid
import keyboard
import pyttsx3
import time
import numpy as np

API_URL = "http://localhost:8000/ask/audio"
SAMPLERATE = 16000
CHANNELS = 1

# ‚ú® –û–ë–ï–†–ò —Å–≤–æ—é –º–æ–≤—É —ñ –≥–æ–ª–æ—Å:
LANG_CODE = "ru"  # –∞–±–æ 'en', 'pl', 'ru' —ñ —Ç.–¥.
VOICE_NAME = "Irina"

# –¶–µ–π –∫–ª–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É –≥–æ–ª–æ—Å–æ–º –ø–∏—Ç–∞–Ω—å –≤ –≤–∏–≥–ª—è–¥—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø–æ–≤–µ—Ä—Ö –≤—Å—ñ—Ö –≤—ñ–∫–æ–Ω


class OverlayAssistant:
    def __init__(self):
        self.root = tk.Tk()
        self.root.overrideredirect(True)
        self.root.attributes("-topmost", True)
        self.root.attributes("-alpha", 0.9)
        self.root.configure(bg="black")

        self.offset_x = 0
        self.offset_y = 0

        self.engine = pyttsx3.init()
        self.voice = self.pick_voice(LANG_CODE, VOICE_NAME)

        self.text_label = tk.Label(self.root, text="üéô –¢—Ä–∏–º–∞–π F9 —â–æ–± –≥–æ–≤–æ—Ä–∏—Ç–∏ | Ctrl+F9 ‚Äî –æ–∑–≤—É—á–∏—Ç–∏", font=("Segoe UI", 11),
                                   bg="black", fg="lime", wraplength=800, justify="left")
        self.text_label.pack(padx=10, pady=(10, 5))

        self.button_frame = tk.Frame(self.root, bg="black")
        self.button_frame.pack(pady=(0, 10))

        self.screen_button = tk.Button(self.button_frame, text="üñº –ê–Ω–∞–ª—ñ–∑ –µ–∫—Ä–∞–Ω–∞", command=self.run_screen_headless,
                                       font=("Segoe UI", 9), bg="gray20", fg="white")
        self.screen_button.pack(side="left", padx=5)

        self.tts_button = tk.Button(self.button_frame, text="üîà –û–∑–≤—É—á–∏—Ç–∏", command=self.speak_text,
                                    font=("Segoe UI", 9), bg="gray20", fg="white")
        self.tts_button.pack(side="left", padx=5)

        self.close_button = tk.Button(self.button_frame, text="‚úñ", command=self.root.destroy,
                                      font=("Segoe UI", 9), bg="darkred", fg="white")
        self.close_button.pack(side="left", padx=5)

        self.root.bind("<ButtonPress-1>", self.start_move)
        self.root.bind("<B1-Motion>", self.do_move)

        self.last_answer = ""
        self.recording = False
        self.audio_frames = []

        threading.Thread(target=self.listen_hotkey_loop, daemon=True).start()

        self.root.geometry("+60+60")

        self.hidden = False

        self.screen_recording = False
        self.screen_audio_frames = []

    def pick_voice(self, lang_code, voice_name=""):
        voices = self.engine.getProperty("voices")
        matched = []
        for v in voices:
            langs = v.languages[0] if isinstance(v.languages[0], str) else v.languages[0].decode(errors="ignore")
            if lang_code.lower() in langs.lower() or lang_code.lower() in v.id.lower():
                matched.append(v)
        if voice_name:
            matched = [v for v in matched if voice_name.lower() in v.name.lower()]
        return matched[0] if matched else self.engine.getProperty("voice")

    def speak_text(self):
        if not self.last_answer:
            return
        self.engine.setProperty("voice", self.voice.id)
        self.engine.setProperty("rate", 175)
        self.engine.say(self.last_answer)
        self.engine.runAndWait()

    def listen_hotkey_loop(self):
        self.text_label.config(text="üéô –¢—Ä–∏–º–∞–π F9 —â–æ–± –≥–æ–≤–æ—Ä–∏—Ç–∏ | Ctrl+F9 ‚Äî –æ–∑–≤—É—á–∏—Ç–∏")
        keyboard.add_hotkey("F8", self.run_screen_headless)
        keyboard.add_hotkey("ctrl+F9", self.speak_text)
        keyboard.add_hotkey("F11", self.toggle_visibility)
        while True:
            if keyboard.is_pressed("F9"):
                self.start_recording()
                while keyboard.is_pressed("F9"):
                    time.sleep(0.1)
                self.stop_and_send()

            # elif keyboard.is_pressed("F10"):
            #     self.start_screen_recording()
            #     while keyboard.is_pressed("F10"):
            #         time.sleep(0.1)
            #     self.stop_and_send_screen()

            elif keyboard.is_pressed("F10"):
                self.start_ffmpeg_recording()
                while keyboard.is_pressed("F10"):
                    time.sleep(0.1)
                self.stop_and_send_ffmpeg()

            time.sleep(0.05)

    def start_ffmpeg_recording(self):
        self.text_label.config(text="üî¥ FFMPEG –∑–∞–ø–∏—Å –∞–∫—Ç–∏–≤–Ω–∏–π... –í—ñ–¥–ø—É—Å—Ç—ñ—Ç—å F7 —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏")
        self.root.lift()
        self.root.update()
        self.ffmpeg_filename = f"temp_{uuid.uuid4().hex}.wav"
        self.ffmpeg_proc = subprocess.Popen([
            "ffmpeg",
            "-f", "dshow",
            "-i", "audio=CABLE Output (VB-Audio Virtual Cable)",
            "-acodec", "pcm_s16le",
            "-ar", "48000",
            "-ac", "1",
            self.ffmpeg_filename
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    def stop_and_send_ffmpeg(self):
        if not hasattr(self, "ffmpeg_proc"):
            return
        self.text_label.config(text="‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è ffmpeg –∑–∞–ø–∏—Å—É...")
        try:
            self.ffmpeg_proc.communicate(timeout=2)
        except subprocess.TimeoutExpired:
            self.ffmpeg_proc.terminate()
        time.sleep(0.5)

        if not os.path.exists(self.ffmpeg_filename):
            self.text_label.config(text="‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
            return

        self.text_label.config(text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ (ffmpeg)...")
        try:
            with open(self.ffmpeg_filename, "rb") as f:
                response = requests.post(API_URL, files={"file": f})
            if response.status_code == 200:
                self.last_answer = response.json().get("answer", "ü§ñ –ù–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                self.text_label.config(text=f"üß† {self.last_answer}")
            else:
                self.text_label.config(text=f"‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            self.text_label.config(text=f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")
        finally:
            if os.path.exists(self.ffmpeg_filename):
                os.remove(self.ffmpeg_filename)

    def run_screen_headless(self):
        self.text_label.config(text="üì∏ –ê–Ω–∞–ª—ñ–∑ –µ–∫—Ä–∞–Ω–∞...")
        self.root.lift()
        self.root.update()

        try:
            output = subprocess.check_output(
                ["python", "screen_headless.py"],
                stderr=subprocess.STDOUT,
                encoding="utf-8"  # <‚Äî –≤–∞–∂–ª–∏–≤–æ
            ).strip()

            if "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å:" in output:
                answer = output.split("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å:")[-1].strip()
                self.last_answer = answer
                self.text_label.config(text=f"üß† {answer}")
            elif output:
                self.text_label.config(text=output)
            else:
                self.text_label.config(text="‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ screen_headless")

        except subprocess.CalledProcessError as e:
            self.text_label.config(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e.output.strip()}")
        except Exception as e:
            self.text_label.config(text=f"‚ö†Ô∏è –í–∏–Ω—è—Ç–æ–∫: {e}")

    def toggle_visibility(self):
        if self.hidden:
            self.root.deiconify()
            self.hidden = False
        else:
            self.root.withdraw()
            self.hidden = True

    def start_screen_recording(self):
        if self.screen_recording:
            return
        self.text_label.config(text="üîä –ó–∞–ø–∏—Å –∑–≤—É–∫—É –∑ –µ–∫—Ä–∞–Ω–∞...")
        self.root.lift()
        self.root.update()
        self.screen_audio_frames = []
        self.screen_recording = True
        threading.Thread(target=self._screen_record_loop, daemon=True).start()

    def _screen_record_loop(self):
        try:
            with sd.InputStream(samplerate=48000, channels=1, dtype='int16') as stream:
                while self.screen_recording:
                    data, _ = stream.read(1024)
                    self.screen_audio_frames.append(data.copy())
        except Exception as e:
            self.text_label.config(text=f"‚ö†Ô∏è –ï–∫—Ä–∞–Ω –∑–∞–ø–∏—Å ‚Äî –ø–æ–º–∏–ª–∫–∞: {e}")
            self.screen_recording = False

    def stop_and_send_screen(self):
        if not self.screen_recording:
            return
        self.screen_recording = False
        self.text_label.config(text="‚è≥ –û–±—Ä–æ–±–∫–∞ –∑–≤—É–∫—É –∑ –µ–∫—Ä–∞–Ω–∞...")
        self.root.update()

        if not self.screen_audio_frames:
            self.text_label.config(text="‚ö†Ô∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∑ –µ–∫—Ä–∞–Ω–∞")
            return

        audio_np = np.concatenate(self.screen_audio_frames, axis=0)
        filename = f"screen_{uuid.uuid4().hex}.wav"
        sf.write(filename, audio_np, samplerate=48000)

        try:
            with open(filename, "rb") as f:
                response = requests.post(API_URL, files={"file": f})
            if response.status_code == 200:
                self.last_answer = response.json().get("answer", "ü§ñ –ù–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                self.text_label.config(text=f"üß† {self.last_answer}")
            else:
                self.text_label.config(text=f"‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            self.text_label.config(text=f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")
        finally:
            if os.path.exists(filename):
                os.remove(filename)

    def start_recording(self):
        if self.recording:
            return
        self.text_label.config(text="üî¥ –ó–∞–ø–∏—Å –∞–∫—Ç–∏–≤–Ω–∏–π... –í—ñ–¥–ø—É—Å—Ç—ñ—Ç—å F9 —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏")
        self.root.lift()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ overlay –ø–æ–≤–µ—Ä—Ö, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω –∑–∞–≥—É–±–∏–≤—Å—è
        self.root.update()
        self.audio_frames = []
        self.recording = True
        threading.Thread(target=self._record_loop, daemon=True).start()

    def _record_loop(self):
        with sd.InputStream(samplerate=SAMPLERATE, channels=CHANNELS, dtype='int16', callback=self.audio_callback):
            while self.recording:
                time.sleep(0.1)

    def audio_callback(self, indata, frames, time_info, status):
        self.audio_frames.append(indata.copy())

    def stop_and_send(self):
        if not self.recording:
            return
        self.recording = False
        self.text_label.config(text="‚è≥ –û–±—Ä–æ–±–∫–∞...")
        self.root.update()

        if not self.audio_frames:
            self.text_label.config(text="‚ö†Ô∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ")
            return

        audio_np = np.concatenate(self.audio_frames, axis=0)
        filename = f"temp_{uuid.uuid4().hex}.wav"
        sf.write(filename, audio_np, samplerate=SAMPLERATE)

        try:
            with open(filename, "rb") as f:
                response = requests.post(API_URL, files={"file": f})
            if response.status_code == 200:
                self.last_answer = response.json().get("answer", "ü§ñ –ù–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                self.text_label.config(text=f"üß† {self.last_answer}")
            else:
                self.text_label.config(text=f"‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            self.text_label.config(text=f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")
        finally:
            if os.path.exists(filename):
                os.remove(filename)

        # self.root.after(10000, lambda: self.text_label.config(text="üéô –¢—Ä–∏–º–∞–π F9 —â–æ–± –≥–æ–≤–æ—Ä–∏—Ç–∏ | Ctrl+F9 ‚Äî –æ–∑–≤—É—á–∏—Ç–∏"))

    def start_move(self, event):
        self.offset_x = event.x
        self.offset_y = event.y

    def do_move(self, event):
        x = event.x_root - self.offset_x
        y = event.y_root - self.offset_y
        self.root.geometry(f'+{x}+{y}')

    def run(self):
        self.root.mainloop()


if __name__ == "__main__":
    print("üì¢ –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—ñ–≤ —É —Å–∏—Å—Ç–µ–º—ñ:")
    eng = pyttsx3.init()
    for v in eng.getProperty("voices"):
        langs = v.languages[0].decode(errors="ignore") if isinstance(v.languages[0], bytes) else v.languages[0]
        print(f"  üîπ {v.name} | {v.id} | lang: {langs}")
    print("\n‚ÑπÔ∏è –û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –º–æ–≤—É —ñ –≤–∫–∞–∂–∏ —É LANG_CODE / VOICE_NAME —É —Ñ–∞–π–ª—ñ overlay.py\n")

    OverlayAssistant().run()